// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.25.2
// source: poll.proto

package poll

import (
	user "github.com/BigNoseCattyHome/aorb/backend/rpc/user"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                          // 问题id
	User         *user.User `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`                      // 用户信息
	Title        string     `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                    // 问题标题
	ChoiceA      string     `protobuf:"bytes,4,opt,name=choice_a,json=choiceA,proto3" json:"choice_a,omitempty"` // 选项a
	ChoiceB      string     `protobuf:"bytes,5,opt,name=choice_b,json=choiceB,proto3" json:"choice_b,omitempty"` // 选项b
	CommentCount uint32     `protobuf:"varint,6,opt,name=comment_count,json=commentCount,proto3" json:"comment_count,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{0}
}

func (x *Poll) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Poll) GetUser() *user.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Poll) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Poll) GetChoiceA() string {
	if x != nil {
		return x.ChoiceA
	}
	return ""
}

func (x *Poll) GetChoiceB() string {
	if x != nil {
		return x.ChoiceB
	}
	return ""
}

func (x *Poll) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

type ListPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId    *string `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3,oneof" json:"actor_id,omitempty"`
	LatestTime *string `protobuf:"bytes,2,opt,name=latest_time,json=latestTime,proto3,oneof" json:"latest_time,omitempty"`
}

func (x *ListPollRequest) Reset() {
	*x = ListPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPollRequest) ProtoMessage() {}

func (x *ListPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPollRequest.ProtoReflect.Descriptor instead.
func (*ListPollRequest) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{1}
}

func (x *ListPollRequest) GetActorId() string {
	if x != nil && x.ActorId != nil {
		return *x.ActorId
	}
	return ""
}

func (x *ListPollRequest) GetLatestTime() string {
	if x != nil && x.LatestTime != nil {
		return *x.LatestTime
	}
	return ""
}

type ListPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string  `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	NextTime   *uint64 `protobuf:"varint,3,opt,name=next_time,json=nextTime,proto3,oneof" json:"next_time,omitempty"`
	PollList   []*Poll `protobuf:"bytes,4,rep,name=poll_list,json=pollList,proto3" json:"poll_list,omitempty"`
}

func (x *ListPollResponse) Reset() {
	*x = ListPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPollResponse) ProtoMessage() {}

func (x *ListPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPollResponse.ProtoReflect.Descriptor instead.
func (*ListPollResponse) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{2}
}

func (x *ListPollResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *ListPollResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *ListPollResponse) GetNextTime() uint64 {
	if x != nil && x.NextTime != nil {
		return *x.NextTime
	}
	return 0
}

func (x *ListPollResponse) GetPollList() []*Poll {
	if x != nil {
		return x.PollList
	}
	return nil
}

type QueryPollRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId string   `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	PollIds []string `protobuf:"bytes,2,rep,name=poll_ids,json=pollIds,proto3" json:"poll_ids,omitempty"`
}

func (x *QueryPollRequest) Reset() {
	*x = QueryPollRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollRequest) ProtoMessage() {}

func (x *QueryPollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollRequest.ProtoReflect.Descriptor instead.
func (*QueryPollRequest) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{3}
}

func (x *QueryPollRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *QueryPollRequest) GetPollIds() []string {
	if x != nil {
		return x.PollIds
	}
	return nil
}

type QueryPollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32   `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string  `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	PollList   []*Poll `protobuf:"bytes,3,rep,name=poll_list,json=pollList,proto3" json:"poll_list,omitempty"`
}

func (x *QueryPollResponse) Reset() {
	*x = QueryPollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollResponse) ProtoMessage() {}

func (x *QueryPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollResponse.ProtoReflect.Descriptor instead.
func (*QueryPollResponse) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{4}
}

func (x *QueryPollResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *QueryPollResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *QueryPollResponse) GetPollList() []*Poll {
	if x != nil {
		return x.PollList
	}
	return nil
}

type PollExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PollId string `protobuf:"bytes,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
}

func (x *PollExistRequest) Reset() {
	*x = PollExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollExistRequest) ProtoMessage() {}

func (x *PollExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollExistRequest.ProtoReflect.Descriptor instead.
func (*PollExistRequest) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{5}
}

func (x *PollExistRequest) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

type PollExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	Existed    bool   `protobuf:"varint,3,opt,name=existed,proto3" json:"existed,omitempty"`
}

func (x *PollExistResponse) Reset() {
	*x = PollExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollExistResponse) ProtoMessage() {}

func (x *PollExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollExistResponse.ProtoReflect.Descriptor instead.
func (*PollExistResponse) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{6}
}

func (x *PollExistResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *PollExistResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *PollExistResponse) GetExisted() bool {
	if x != nil {
		return x.Existed
	}
	return false
}

type QueryPollSummaryAndKeywordsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActorId string `protobuf:"bytes,1,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	PollId  string `protobuf:"bytes,2,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
}

func (x *QueryPollSummaryAndKeywordsRequest) Reset() {
	*x = QueryPollSummaryAndKeywordsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollSummaryAndKeywordsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollSummaryAndKeywordsRequest) ProtoMessage() {}

func (x *QueryPollSummaryAndKeywordsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollSummaryAndKeywordsRequest.ProtoReflect.Descriptor instead.
func (*QueryPollSummaryAndKeywordsRequest) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{7}
}

func (x *QueryPollSummaryAndKeywordsRequest) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *QueryPollSummaryAndKeywordsRequest) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

type QueryPollSummaryAndKeywordsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode int32  `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMsg  string `protobuf:"bytes,2,opt,name=status_msg,json=statusMsg,proto3" json:"status_msg,omitempty"`
	Summary    string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Keywords   string `protobuf:"bytes,4,opt,name=keywords,proto3" json:"keywords,omitempty"`
}

func (x *QueryPollSummaryAndKeywordsResponse) Reset() {
	*x = QueryPollSummaryAndKeywordsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poll_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPollSummaryAndKeywordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPollSummaryAndKeywordsResponse) ProtoMessage() {}

func (x *QueryPollSummaryAndKeywordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poll_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPollSummaryAndKeywordsResponse.ProtoReflect.Descriptor instead.
func (*QueryPollSummaryAndKeywordsResponse) Descriptor() ([]byte, []int) {
	return file_poll_proto_rawDescGZIP(), []int{8}
}

func (x *QueryPollSummaryAndKeywordsResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *QueryPollSummaryAndKeywordsResponse) GetStatusMsg() string {
	if x != nil {
		return x.StatusMsg
	}
	return ""
}

func (x *QueryPollSummaryAndKeywordsResponse) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *QueryPollSummaryAndKeywordsResponse) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

var File_poll_proto protoreflect.FileDescriptor

var file_poll_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x74, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x20, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x48, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x6c, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x49,
	0x64, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x10, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65,
	0x64, 0x22, 0x58, 0x0a, 0x22, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x23,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d,
	0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x32, 0xb0, 0x03, 0x0a, 0x0b, 0x50, 0x6f,
	0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x42, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x12, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c,
	0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f,
	0x6c, 0x6c, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x2c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f,
	0x6c, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x42, 0x69, 0x67, 0x4e, 0x6f,
	0x73, 0x65, 0x43, 0x61, 0x74, 0x74, 0x79, 0x48, 0x6f, 0x6d, 0x65, 0x2f, 0x61, 0x6f, 0x72, 0x62,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x6f, 0x6c,
	0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_poll_proto_rawDescOnce sync.Once
	file_poll_proto_rawDescData = file_poll_proto_rawDesc
)

func file_poll_proto_rawDescGZIP() []byte {
	file_poll_proto_rawDescOnce.Do(func() {
		file_poll_proto_rawDescData = protoimpl.X.CompressGZIP(file_poll_proto_rawDescData)
	})
	return file_poll_proto_rawDescData
}

var file_poll_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_poll_proto_goTypes = []interface{}{
	(*Poll)(nil),                                // 0: rpc.poll.Poll
	(*ListPollRequest)(nil),                     // 1: rpc.poll.ListPollRequest
	(*ListPollResponse)(nil),                    // 2: rpc.poll.ListPollResponse
	(*QueryPollRequest)(nil),                    // 3: rpc.poll.QueryPollRequest
	(*QueryPollResponse)(nil),                   // 4: rpc.poll.QueryPollResponse
	(*PollExistRequest)(nil),                    // 5: rpc.poll.PollExistRequest
	(*PollExistResponse)(nil),                   // 6: rpc.poll.PollExistResponse
	(*QueryPollSummaryAndKeywordsRequest)(nil),  // 7: rpc.poll.QueryPollSummaryAndKeywordsRequest
	(*QueryPollSummaryAndKeywordsResponse)(nil), // 8: rpc.poll.QueryPollSummaryAndKeywordsResponse
	(*user.User)(nil),                           // 9: rpc.user.User
}
var file_poll_proto_depIdxs = []int32{
	9, // 0: rpc.poll.Poll.user:type_name -> rpc.user.User
	0, // 1: rpc.poll.ListPollResponse.poll_list:type_name -> rpc.poll.Poll
	0, // 2: rpc.poll.QueryPollResponse.poll_list:type_name -> rpc.poll.Poll
	1, // 3: rpc.poll.PollService.ListPollsByRecommend:input_type -> rpc.poll.ListPollRequest
	1, // 4: rpc.poll.PollService.ListPolls:input_type -> rpc.poll.ListPollRequest
	3, // 5: rpc.poll.PollService.QueryPolls:input_type -> rpc.poll.QueryPollRequest
	5, // 6: rpc.poll.PollService.QueryPollExisted:input_type -> rpc.poll.PollExistRequest
	7, // 7: rpc.poll.PollService.QueryPollSummaryAndKeywords:input_type -> rpc.poll.QueryPollSummaryAndKeywordsRequest
	2, // 8: rpc.poll.PollService.ListPollsByRecommend:output_type -> rpc.poll.ListPollResponse
	2, // 9: rpc.poll.PollService.ListPolls:output_type -> rpc.poll.ListPollResponse
	4, // 10: rpc.poll.PollService.QueryPolls:output_type -> rpc.poll.QueryPollResponse
	6, // 11: rpc.poll.PollService.QueryPollExisted:output_type -> rpc.poll.PollExistResponse
	8, // 12: rpc.poll.PollService.QueryPollSummaryAndKeywords:output_type -> rpc.poll.QueryPollSummaryAndKeywordsResponse
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_poll_proto_init() }
func file_poll_proto_init() {
	if File_poll_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poll_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollSummaryAndKeywordsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poll_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPollSummaryAndKeywordsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_poll_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_poll_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poll_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_poll_proto_goTypes,
		DependencyIndexes: file_poll_proto_depIdxs,
		MessageInfos:      file_poll_proto_msgTypes,
	}.Build()
	File_poll_proto = out.File
	file_poll_proto_rawDesc = nil
	file_poll_proto_goTypes = nil
	file_poll_proto_depIdxs = nil
}
