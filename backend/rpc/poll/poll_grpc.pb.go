// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: poll.proto

package poll

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PollService_ActionPoll_FullMethodName = "/rpc.poll.PollService/ActionPoll"
	PollService_ListPoll_FullMethodName   = "/rpc.poll.PollService/ListPoll"
	PollService_CountPoll_FullMethodName  = "/rpc.poll.PollService/CountPoll"
)

// PollServiceClient is the client API for PollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PollServiceClient interface {
	ActionPoll(ctx context.Context, in *ActionPollRequest, opts ...grpc.CallOption) (*ActionPollResponse, error)
	ListPoll(ctx context.Context, in *ListPollRequest, opts ...grpc.CallOption) (*ListPollResponse, error)
	CountPoll(ctx context.Context, in *CountPollRequest, opts ...grpc.CallOption) (*CountPollResponse, error)
}

type pollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPollServiceClient(cc grpc.ClientConnInterface) PollServiceClient {
	return &pollServiceClient{cc}
}

func (c *pollServiceClient) ActionPoll(ctx context.Context, in *ActionPollRequest, opts ...grpc.CallOption) (*ActionPollResponse, error) {
	out := new(ActionPollResponse)
	err := c.cc.Invoke(ctx, PollService_ActionPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) ListPoll(ctx context.Context, in *ListPollRequest, opts ...grpc.CallOption) (*ListPollResponse, error) {
	out := new(ListPollResponse)
	err := c.cc.Invoke(ctx, PollService_ListPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) CountPoll(ctx context.Context, in *CountPollRequest, opts ...grpc.CallOption) (*CountPollResponse, error) {
	out := new(CountPollResponse)
	err := c.cc.Invoke(ctx, PollService_CountPoll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollServiceServer is the server API for PollService service.
// All implementations must embed UnimplementedPollServiceServer
// for forward compatibility
type PollServiceServer interface {
	ActionPoll(context.Context, *ActionPollRequest) (*ActionPollResponse, error)
	ListPoll(context.Context, *ListPollRequest) (*ListPollResponse, error)
	CountPoll(context.Context, *CountPollRequest) (*CountPollResponse, error)
	mustEmbedUnimplementedPollServiceServer()
}

// UnimplementedPollServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPollServiceServer struct {
}

func (UnimplementedPollServiceServer) ActionPoll(context.Context, *ActionPollRequest) (*ActionPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionPoll not implemented")
}
func (UnimplementedPollServiceServer) ListPoll(context.Context, *ListPollRequest) (*ListPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoll not implemented")
}
func (UnimplementedPollServiceServer) CountPoll(context.Context, *CountPollRequest) (*CountPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPoll not implemented")
}
func (UnimplementedPollServiceServer) mustEmbedUnimplementedPollServiceServer() {}

// UnsafePollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollServiceServer will
// result in compilation errors.
type UnsafePollServiceServer interface {
	mustEmbedUnimplementedPollServiceServer()
}

func RegisterPollServiceServer(s grpc.ServiceRegistrar, srv PollServiceServer) {
	s.RegisterService(&PollService_ServiceDesc, srv)
}

func _PollService_ActionPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).ActionPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_ActionPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).ActionPoll(ctx, req.(*ActionPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_ListPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).ListPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_ListPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).ListPoll(ctx, req.(*ListPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_CountPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).CountPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_CountPoll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).CountPoll(ctx, req.(*CountPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PollService_ServiceDesc is the grpc.ServiceDesc for PollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.poll.PollService",
	HandlerType: (*PollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActionPoll",
			Handler:    _PollService_ActionPoll_Handler,
		},
		{
			MethodName: "ListPoll",
			Handler:    _PollService_ListPoll_Handler,
		},
		{
			MethodName: "CountPoll",
			Handler:    _PollService_CountPoll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poll.proto",
}
