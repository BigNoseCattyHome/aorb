// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: poll.proto

package poll

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PollService_ListPollsByRecommend_FullMethodName        = "/rpc.poll.PollService/ListPollsByRecommend"
	PollService_ListPolls_FullMethodName                   = "/rpc.poll.PollService/ListPolls"
	PollService_QueryPolls_FullMethodName                  = "/rpc.poll.PollService/QueryPolls"
	PollService_QueryPollExisted_FullMethodName            = "/rpc.poll.PollService/QueryPollExisted"
	PollService_QueryPollSummaryAndKeywords_FullMethodName = "/rpc.poll.PollService/QueryPollSummaryAndKeywords"
)

// PollServiceClient is the client API for PollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PollServiceClient interface {
	ListPollsByRecommend(ctx context.Context, in *ListPollRequest, opts ...grpc.CallOption) (*ListPollResponse, error)
	ListPolls(ctx context.Context, in *ListPollRequest, opts ...grpc.CallOption) (*ListPollResponse, error)
	QueryPolls(ctx context.Context, in *QueryPollRequest, opts ...grpc.CallOption) (*QueryPollResponse, error)
	QueryPollExisted(ctx context.Context, in *PollExistRequest, opts ...grpc.CallOption) (*PollExistResponse, error)
	QueryPollSummaryAndKeywords(ctx context.Context, in *QueryPollSummaryAndKeywordsRequest, opts ...grpc.CallOption) (*QueryPollSummaryAndKeywordsResponse, error)
}

type pollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPollServiceClient(cc grpc.ClientConnInterface) PollServiceClient {
	return &pollServiceClient{cc}
}

func (c *pollServiceClient) ListPollsByRecommend(ctx context.Context, in *ListPollRequest, opts ...grpc.CallOption) (*ListPollResponse, error) {
	out := new(ListPollResponse)
	err := c.cc.Invoke(ctx, PollService_ListPollsByRecommend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) ListPolls(ctx context.Context, in *ListPollRequest, opts ...grpc.CallOption) (*ListPollResponse, error) {
	out := new(ListPollResponse)
	err := c.cc.Invoke(ctx, PollService_ListPolls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) QueryPolls(ctx context.Context, in *QueryPollRequest, opts ...grpc.CallOption) (*QueryPollResponse, error) {
	out := new(QueryPollResponse)
	err := c.cc.Invoke(ctx, PollService_QueryPolls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) QueryPollExisted(ctx context.Context, in *PollExistRequest, opts ...grpc.CallOption) (*PollExistResponse, error) {
	out := new(PollExistResponse)
	err := c.cc.Invoke(ctx, PollService_QueryPollExisted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollServiceClient) QueryPollSummaryAndKeywords(ctx context.Context, in *QueryPollSummaryAndKeywordsRequest, opts ...grpc.CallOption) (*QueryPollSummaryAndKeywordsResponse, error) {
	out := new(QueryPollSummaryAndKeywordsResponse)
	err := c.cc.Invoke(ctx, PollService_QueryPollSummaryAndKeywords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollServiceServer is the server API for PollService service.
// All implementations must embed UnimplementedPollServiceServer
// for forward compatibility
type PollServiceServer interface {
	ListPollsByRecommend(context.Context, *ListPollRequest) (*ListPollResponse, error)
	ListPolls(context.Context, *ListPollRequest) (*ListPollResponse, error)
	QueryPolls(context.Context, *QueryPollRequest) (*QueryPollResponse, error)
	QueryPollExisted(context.Context, *PollExistRequest) (*PollExistResponse, error)
	QueryPollSummaryAndKeywords(context.Context, *QueryPollSummaryAndKeywordsRequest) (*QueryPollSummaryAndKeywordsResponse, error)
	mustEmbedUnimplementedPollServiceServer()
}

// UnimplementedPollServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPollServiceServer struct {
}

func (UnimplementedPollServiceServer) ListPollsByRecommend(context.Context, *ListPollRequest) (*ListPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPollsByRecommend not implemented")
}
func (UnimplementedPollServiceServer) ListPolls(context.Context, *ListPollRequest) (*ListPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolls not implemented")
}
func (UnimplementedPollServiceServer) QueryPolls(context.Context, *QueryPollRequest) (*QueryPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPolls not implemented")
}
func (UnimplementedPollServiceServer) QueryPollExisted(context.Context, *PollExistRequest) (*PollExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPollExisted not implemented")
}
func (UnimplementedPollServiceServer) QueryPollSummaryAndKeywords(context.Context, *QueryPollSummaryAndKeywordsRequest) (*QueryPollSummaryAndKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPollSummaryAndKeywords not implemented")
}
func (UnimplementedPollServiceServer) mustEmbedUnimplementedPollServiceServer() {}

// UnsafePollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollServiceServer will
// result in compilation errors.
type UnsafePollServiceServer interface {
	mustEmbedUnimplementedPollServiceServer()
}

func RegisterPollServiceServer(s grpc.ServiceRegistrar, srv PollServiceServer) {
	s.RegisterService(&PollService_ServiceDesc, srv)
}

func _PollService_ListPollsByRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).ListPollsByRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_ListPollsByRecommend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).ListPollsByRecommend(ctx, req.(*ListPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_ListPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).ListPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_ListPolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).ListPolls(ctx, req.(*ListPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_QueryPolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).QueryPolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_QueryPolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).QueryPolls(ctx, req.(*QueryPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_QueryPollExisted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PollExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).QueryPollExisted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_QueryPollExisted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).QueryPollExisted(ctx, req.(*PollExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PollService_QueryPollSummaryAndKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPollSummaryAndKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollServiceServer).QueryPollSummaryAndKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PollService_QueryPollSummaryAndKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollServiceServer).QueryPollSummaryAndKeywords(ctx, req.(*QueryPollSummaryAndKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PollService_ServiceDesc is the grpc.ServiceDesc for PollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.poll.PollService",
	HandlerType: (*PollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPollsByRecommend",
			Handler:    _PollService_ListPollsByRecommend_Handler,
		},
		{
			MethodName: "ListPolls",
			Handler:    _PollService_ListPolls_Handler,
		},
		{
			MethodName: "QueryPolls",
			Handler:    _PollService_QueryPolls_Handler,
		},
		{
			MethodName: "QueryPollExisted",
			Handler:    _PollService_QueryPollExisted_Handler,
		},
		{
			MethodName: "QueryPollSummaryAndKeywords",
			Handler:    _PollService_QueryPollSummaryAndKeywords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poll.proto",
}
