syntax = "proto3";
package rpc.user;
option go_package = "github.com/BigNoseCattyHome/aorb/backend/rpc/user;user";
import "google/protobuf/timestamp.proto";

message User {
  string id = 1; // 用户ID
  string username = 2; // 用户登录名
  string avatar = 3; // 用户头像
  string nickname = 4; // 用户昵称

  // 这里定义了很多种消息类型，是为了方便以后的扩展

  optional string password = 5; // 用户密码
  optional double coins = 6; // 用户的金币数
  optional CoinRecordList coins_record = 7; // 用户金币流水记录
  optional FollowedList followed = 8; // 关注者列表
  optional FollowerList follower = 9; // 被关注者列表
  optional BlackList blacklist = 10; // 屏蔽好友列表
  optional string ipaddress = 11; // IP归属地
  optional PollAskList poll_ask = 12; // 发起过的问题id列表
  optional PollAnsList poll_ans = 13; // 回答过的问题id列表
  optional PollCollectList poll_collect = 14; // 收藏的问题id列表
  google.protobuf.Timestamp create_at = 15;  // 创建时间
  google.protobuf.Timestamp update_at = 16;  // 删除时间
  google.protobuf.Timestamp delete_at = 17;  // 删除时间
}

message BlackList {
  repeated string usernames = 1; // 屏蔽好友的 username 列表
}

message CoinRecord {
  uint32 consume = 1; // 消耗的金币数
  string poll_id = 2; // 为其投币的问题ID
  string username = 3; // 使用者的 username 
}

message CoinRecordList {
  repeated CoinRecord records = 1; // 金币流水记录列表
}


message FollowedList {
  repeated string usernames = 1; // 关注者的 username 列表
}

message FollowerList {
  repeated string usernames = 1; // 被关注者的 username 列表
}

message PollAskList {
  repeated string poll_ids = 1; // 发起过的问题ID列表
}

message PollAnsList {
  repeated string poll_ids = 1; // 回答过的问题ID列表
}

message PollCollectList {
  repeated string poll_ids = 1; // 收藏的问题ID列表
}
message UserRequest{
  string username = 1;
  repeated string fields = 2;  // 可选字段列表，选择User中的字段进行查询
}

message UserResponse{
  int32 status_code = 1;  // 状态码，0-成功，其他值-失败
  string status_msg = 2;  // 返回状态描述
  User user = 3;  // 用户信息
}

message UserExistRequest{
  string username = 1; // 用户名
}

message UserExistResponse{
  int32 status_code = 1;  // 状态码，0-成功，其他值-失败
  string status_msg = 2;  // 返回状态描述
  bool existed = 3;  // 是否存在用户
}

message IsUserFollowingRequest {
  string username = 1;       // 当前用户的用户名
  string target_username = 2; // 目标用户的用户名
}

message IsUserFollowingResponse {
  int32 status_code = 1;  // 状态码，0-成功，其他值-失败
  string status_msg = 2;  // 返回状态描述
  bool is_following = 3;    // 是否正在关注
}
service UserService{
  rpc GetUserInfo(UserRequest) returns (UserResponse);
  rpc CheckUserExists(UserExistRequest) returns (UserExistResponse);
  rpc IsUserFollowing(IsUserFollowingRequest) returns (IsUserFollowingResponse);
}